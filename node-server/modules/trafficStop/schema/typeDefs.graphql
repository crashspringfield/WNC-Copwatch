type Query {
  trafficStops (
    after: String,
    before: String,
    arrest: Boolean,
    search: Boolean,
    reason: String
  ): [TrafficStop!]!

  trafficStop(id: Int!): TrafficStop!

  dailyTrafficStopStats: [DailyTrafficStats]

  allTrafficStopStats: [Stat]

  # allTrafficStopStats: AllTrafficStopStats
}

type TrafficStop {
  id: Int
  date: Date

  address: String
  agency: String
  geometry: LatLng
  reason: String
  traffic_stop_id: Int
  off_use_force: Boolean
  off_phys_resis: Boolean

  driver_arrested: Boolean
  passenger_arrested: Boolean

  driver_searched: Boolean
  passenger_searched: Boolean
  no_contraband_found: Boolean
  personal_effects_searched: Boolean
  search_initiated: Boolean
  vehicle_searched: Boolean
  search_category: [String]

  t_search_consent: Int
  t_search_warrant: Int
  t_probable_cause: Int

  name_age: String
  name_race: String
  name_sex: String
  name_ethnicity: String
}

type DailyTrafficStats {
  date: Date
  stops: Int

  arrests: Int
  driver_arrested: Int
  passenger_arrested: Int

  searches: Int
  driver_searched: Int
  passenger_searched: Int
  no_contraband_found: Int
  personal_effects_searched: Int
  search_initiated: Int
  vehicle_searched: Int
}

type AllTrafficStopStats {
  stops: Int
  searches: Int
  arrests: Int
  searchWithoutArrest: Int
  arrestWithoutSearch: Int
  seachWithConsent: Int
  searchWithProbableCause: Int
  searchWithWarrant: Int
  searchWithoutConsentWarrantOrProbableCause: Int
}

# TODO: The D3 library would work better with an array
type Stat {
  key: String
  value: Int
}
